<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BillionsJordan</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-31T10:21:01.108Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>BillionsJordan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初学javaEE的一些总结</title>
    <link href="http://yoursite.com/2018/08/31/%E5%88%9D%E5%AD%A6javaEE%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/08/31/初学javaEE的一些总结/</id>
    <published>2018-08-31T03:09:01.000Z</published>
    <updated>2018-08-31T10:21:01.108Z</updated>
    
    <content type="html"><![CDATA[<h4 id="总体架构"><a href="#总体架构" class="headerlink" title="总体架构"></a>总体架构</h4><p>做一个网页，总是需要在客户端与服务器进行交互。当有非常多的客户端时，交互会非常复杂，为了方便代码的管理，人们提出了几个层次：Dao层、service层、web层。如下<br><img src="/2018/08/31/初学javaEE的一些总结/./javaWeb结构.JPG" alt="javaWeb结构"><br>其中，Dao层用于与数据库交互，本质上是<strong>对数据库进行增删改查</strong>，一般每个Dao类设置为具体的需要进行增删改查操作的对象。比如用户需要得到用户名、密码等信息，可以在Dao包中设立一个UserDao.java类。<br>Service层与Dao层连接，<strong>对Dao层所取得的数据进行逻辑处理</strong>，通常得到一个list。<br>Web层中，servlet层用于接收jsp传过来的参数，同时<strong>将参数传递给一个service层的对象</strong>，得到其反馈的结果，并将其传递给jsp页面，<strong>形成一个循环</strong>。jsp层用于接收用户输入或开发者一开始设置的参数，并将其传递给servlet 层，jsp页面可能只有其中一个功能。之所以将web层分成这两个，是因为在jsp中书写html和java代码会很复杂，所以将jsp主要用于html展示，servlet主要用于java代码书写（即逻辑处理）。<br>一般将这三个层都做成包（package），此外还会做一个model包，包含各种模型（对象），通过三个层对该模型进行具体化，避免了每一次都设定对象的麻烦。</p><h4 id="三种请求"><a href="#三种请求" class="headerlink" title="三种请求"></a>三种请求</h4><p>包括request、session、application</p><h5 id="request"><a href="#request" class="headerlink" title="request"></a>request</h5><p>从开发者角度看：<br>作用于那些需要在所有处理同一个request请求的页面中，深入理解的话即一个jsp文件对应一个request，一般用于servlet和jsp之间信息的传递，即servlet中使用</p><pre><code>request.setAttribute（name，object);</code></pre><p>以及</p><pre><code>request.getRequestDispatcher(&quot;jsp文件名&quot;).forward(request, response);</code></pre><p>jsp中接收分为两种，如果有java代码，可使用</p><pre><code>request.getAttribute(name);</code></pre><p>如果为html代码，则直接使用name即可，比如传递过来的参数名为“good”，里面有name，则直接用good.name即可取得。<br>从使用人员角度看：<br>request简单理解为对应一个浏览器的页面，这个页面变换/刷新了这个request都会重置</p><h5 id="session"><a href="#session" class="headerlink" title="session"></a>session</h5><p>从开发者角度看：<br>servlet包中（即继承HttpServlet的类）的java文件均可共享的请求，方便不同文件间传递信息！一般不使用session对servlet文件和jsp文件进行信息传递，但也是可以的，用法与request的一样，jsp接收方式也一样。<br>从使用人员角度看：<br>打开一个浏览器，则这个浏览器中的所有页面均可以访问这个session，只要不关闭这个浏览器，这个session就一直存在。当然，为了降低服务器的压力，一般会在浏览器页面20-30分钟没有刷新时关闭掉session，这个时间开发者可以调整。<br>使用方法如下：</p><pre><code>request.getSession().setAttribute(name, object);request.getSession().getAttribute(name);</code></pre><h5 id="application"><a href="#application" class="headerlink" title="application"></a>application</h5><p>从开发者角度看：<br>所有页面（包括java、jsp等）都可以访问<br>从使用人员角度看：<br>作用于这个应用程序的所有用户，从服务器一开始执行服务，一直到服务器关闭为止。<br>使用方法如下：</p><pre><code>arg0.getServletContext().setAttribute(name, object);</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;总体架构&quot;&gt;&lt;a href=&quot;#总体架构&quot; class=&quot;headerlink&quot; title=&quot;总体架构&quot;&gt;&lt;/a&gt;总体架构&lt;/h4&gt;&lt;p&gt;做一个网页，总是需要在客户端与服务器进行交互。当有非常多的客户端时，交互会非常复杂，为了方便代码的管理，人们提出了几个层次：
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>创建hexo博客的一些小点</title>
    <link href="http://yoursite.com/2018/08/22/%E5%88%9B%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%82%B9/"/>
    <id>http://yoursite.com/2018/08/22/创建hexo博客的一些小点/</id>
    <published>2018-08-22T02:45:50.000Z</published>
    <updated>2018-08-31T10:21:15.071Z</updated>
    
    <content type="html"><![CDATA[<p>本文不涉及到太具体的安装方法<br>粗略总结一下：</p><h4 id="hexo-admin的作用"><a href="#hexo-admin的作用" class="headerlink" title="hexo-admin的作用"></a>hexo-admin的作用</h4><p>&ensp; &emsp; 个人而言，还没有体会出太大的作用。<br>&emsp; &emsp;1.hexo插入图片时，在创建md文件的同时需要创建一个同名文件夹，用来存储图片。而admin后台中的post新建md文件时并没有创建该文件夹，这导致我们需要再在<strong>source/_posts</strong>下创建同名文件夹，很显然这很多余。当然应该可以通过修改post按钮对应命令的方法进行统合，但我不熟悉这里，所以没有采用。<br>&emsp; &emsp;2.deploy文件夹只限于发布部署命令（<strong>hexo d -g</strong>），这显然太过大材小用。<br>&emsp; &emsp;3.在admin的实时编辑中，缺乏实时性，不能“所见即所得”，需要刷新才能看见排版，非常麻烦。<br>&ensp; &emsp;针对上面的问题，我的方法如下：<br>&emsp; &emsp;1.<a href="https://blog.csdn.net/qq_37497322/article/details/80628713" target="_blank" rel="noopener">如何在hexo博客中插入图片</a>（转载）。简单来说即通过<strong>hexo n “xxx”</strong>命令在创建md文件的同时自动创建同名文件夹。<br>&emsp; &emsp;2.在hexo文件夹下写一个内嵌该命令的bat文件，发布博客时，点击该bat文件即可。<br>&emsp; &emsp;3.采用马克飞象。</p><h4 id="添加评论功能"><a href="#添加评论功能" class="headerlink" title="添加评论功能"></a>添加评论功能</h4><p>&ensp; &emsp; 基本步骤如<a href="https://blog.csdn.net/ganzhilin520/article/details/79048010" target="_blank" rel="noopener">hexo添加评论功能</a>（转载）所示，但有几点要注意。<br>&emsp; &emsp;1.这个链接的前提是next主题，具体安装步骤如<a href="https://blog.csdn.net/zuoziji416/article/details/53204478" target="_blank" rel="noopener">Hexo的Next主题配置</a>，需要注意，下载代码后将文件夹重命名为next，放在theme文件夹下；发布部署后可能要过一段时间自己的主页才会更新主题，需要耐心等待下。<br>&emsp; &emsp;2.在定位livere_uid 字段时，将前面的#号去掉，同时重新生成部署。最后效果如下：<br><img src="/2018/08/22/创建hexo博客的一些小点/./hexo评论.JPG" alt="hexo评论"></p><h4 id="主题栏设置"><a href="#主题栏设置" class="headerlink" title="主题栏设置"></a>主题栏设置</h4><p>&ensp; &emsp;找到<strong>themes/next/_config.yml</strong>，搜索s<strong>scheme</strong>，将默认的Muse注释掉，将Pisces前面的#号去掉，表示界面弄为双栏模式；再搜索<strong>sidebar</strong>，其中position对应的值为主栏的位置。我的position设置为right，效果如下：<br><img src="/2018/08/22/创建hexo博客的一些小点/./双栏示意图.JPG" alt="双栏示意图"></p><h4 id="打赏、搜索、头像、昵称、签名设置"><a href="#打赏、搜索、头像、昵称、签名设置" class="headerlink" title="打赏、搜索、头像、昵称、签名设置"></a>打赏、搜索、头像、昵称、签名设置</h4><p>&ensp; &emsp;在<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">官方文档</a>中均有详细描述，照着做就好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文不涉及到太具体的安装方法&lt;br&gt;粗略总结一下：&lt;/p&gt;
&lt;h4 id=&quot;hexo-admin的作用&quot;&gt;&lt;a href=&quot;#hexo-admin的作用&quot; class=&quot;headerlink&quot; title=&quot;hexo-admin的作用&quot;&gt;&lt;/a&gt;hexo-admin的作用&lt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
